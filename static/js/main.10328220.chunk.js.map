{"version":3,"sources":["Formik/FilterHelper/index.jsx","Form/Select/index.jsx","Formik/Select/index.jsx","App.js","index.js"],"names":["FilterHelper","configList","config","children","useFormikContext","formikValues","values","setFieldValue","valuesList","useMemo","map","name","_","get","names","optionsList","list","filterBy","getOption","entity","parentValue","props","omit","filteredOptionsList","reduce","acc","options","depth","isMulti","Array","isArray","allPossibleParentValues","value","newOptions","filter","option","length","includes","useEffect","forEach","allowedValues","newValues","newValue","zipWith","propTypes","PropTypes","arrayOf","shape","string","isRequired","array","func","memo","prevProps","nextProps","Select","defaultProps","multi","disabled","searchable","getOptionValue","getCompleteState","memoize","find","onChange","onBlur","clearable","placeholder","nextState","Error","getMinifiedState","isDisabled","isClearable","isSearchable","filterOption","createFilter","ignoreAccents","styles","rest","useField","field","helpers","setValue","setTouched","App","id","label","String","list1","list2","list3","list4","className","initialValues","A","B","C","D","propsList","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.10328220.chunk.js","sourcesContent":["import { useMemo, useEffect, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { useFormikContext } from 'formik';\nimport _ from 'lodash';\n\nFilterHelper.propTypes = {\n  config: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      list: PropTypes.array.isRequired,\n      getOption: PropTypes.func.isRequired,\n      filterBy: PropTypes.string,\n    }).isRequired\n  ).isRequired,\n  children: PropTypes.func.isRequired,\n};\n\nfunction FilterHelper({ config: configList, children }) {\n  const { values: formikValues, setFieldValue } = useFormikContext();\n\n  const valuesList = useMemo(\n    () => configList.map(({ name }) => _.get(formikValues, name)),\n    [configList, formikValues]\n  );\n\n  const { names, optionsList, props } = useMemo(\n    () => ({\n      names: configList.map(({ name }) => name),\n      optionsList: configList.map(({ list, filterBy, getOption }) =>\n        list.map(entity => ({\n          parentValue: entity[filterBy],\n          ...getOption(entity),\n        }))\n      ),\n      props: configList.map(entity =>\n        _.omit(entity, ['name', 'list', 'getOption', 'filterBy'])\n      ),\n    }),\n    [configList]\n  );\n\n  const getFilteredOptions = () =>\n    optionsList.reduce((acc, options, depth) => {\n      if (depth === 0) {\n        return [options];\n      } else {\n        const parentValue = valuesList[depth - 1];\n        const isMulti = Array.isArray(parentValue);\n        const parentOptions = acc[depth - 1];\n        const allPossibleParentValues = parentOptions.map(({ value }) => value);\n\n        const newOptions = options.filter(option => {\n          if (isMulti) {\n            if (parentValue.length) {\n              return parentValue.includes(option.parentValue);\n            } else {\n              return allPossibleParentValues.includes(option.parentValue);\n            }\n          } else {\n            if (parentValue !== null) {\n              return parentValue === option.parentValue;\n            } else {\n              return allPossibleParentValues.includes(option.parentValue);\n            }\n          }\n        });\n\n        return [...acc, newOptions];\n      }\n    }, []);\n\n  const filteredOptionsList = useMemo(getFilteredOptions, [\n    optionsList,\n    valuesList,\n  ]);\n\n  useEffect(() => {\n    valuesList.forEach((values, depth) => {\n      const isMulti = Array.isArray(values);\n      const allowedValues = filteredOptionsList[depth].map(\n        ({ value }) => value\n      );\n\n      if (isMulti) {\n        const newValues = allowedValues.filter(value => values.includes(value));\n\n        if (values.length !== newValues.length) {\n          setFieldValue(configList[depth].name, newValues);\n        }\n      } else {\n        const newValue = allowedValues.includes(values) ? values : null;\n\n        if (values !== newValue) {\n          setFieldValue(configList[depth].name, newValue);\n        }\n      }\n    });\n  }, [valuesList, configList, filteredOptionsList, setFieldValue]);\n\n  const propsList = useMemo(\n    () =>\n      _.zipWith(names, filteredOptionsList, props, (name, options, props) => ({\n        name,\n        options,\n        ...props,\n      })),\n    [names, filteredOptionsList, props]\n  );\n\n  return children(propsList);\n}\n\nexport default memo(\n  FilterHelper,\n  (prevProps, nextProps) => prevProps.config === nextProps.config\n);\n","import PropTypes from 'prop-types';\nimport WindowedSelect, { createFilter } from 'react-windowed-select';\nimport memoize from 'memoize-one';\n\nimport styles from './styles';\n\nSelect.propTypes = {\n  name: PropTypes.string,\n  value: PropTypes.any,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      label: PropTypes.string.isRequired,\n      value: PropTypes.any.isRequired,\n    })\n  ).isRequired,\n  onChange: PropTypes.func.isRequired,\n  onBlur: PropTypes.func,\n  multi: PropTypes.bool,\n  disabled: PropTypes.bool,\n  clearable: PropTypes.bool,\n  searchable: PropTypes.bool,\n  placeholder: PropTypes.string,\n  getOptionValue: PropTypes.func,\n};\n\nSelect.defaultProps = {\n  multi: false,\n  disabled: false,\n  searchable: true,\n  getOptionValue: (option) => option.value,\n  // clearable: multi ? true : false,\n  // placeholder: !disabled ? 'Select...' : '',\n};\n\nconst getCompleteState = memoize(({ value, options, multi }) =>\n  multi\n    ? options.filter((option) => value.includes(option.value))\n    : options.find((option) => option.value === value) || null\n);\n\nconst getMinifiedState = ({ newValue, multi }) => {\n  switch (multi) {\n    case true:\n      return newValue ? newValue.map(({ value }) => value) : [];\n    case false:\n      return newValue ? newValue.value : null;\n    default:\n      throw new Error('multi is not defined');\n  }\n};\n\nfunction Select(props) {\n  const {\n    name,\n    value,\n    options,\n    onChange,\n    onBlur,\n    multi,\n    disabled,\n    clearable,\n    searchable,\n    placeholder,\n    getOptionValue,\n  } = props;\n\n  const handleChange = (newValue) => {\n    const nextState = getMinifiedState({ newValue, multi });\n\n    onChange(nextState);\n  };\n\n  return (\n    <WindowedSelect\n      name={name}\n      value={getCompleteState({ value, options, multi })}\n      onChange={handleChange}\n      onBlur={onBlur}\n      options={options}\n      isMulti={multi}\n      isDisabled={disabled}\n      isClearable={clearable}\n      isSearchable={searchable}\n      placeholder={disabled ? '' : placeholder}\n      getOptionValue={getOptionValue}\n      filterOption={createFilter({ ignoreAccents: false })}\n      styles={styles}\n    />\n  );\n}\n\nexport default Select;\n","import { useField } from 'formik';\n\nimport ControledSelect from '../../Form/Select';\n\nfunction Select({ name, ...rest }) {\n  const [field, , helpers] = useField({ name });\n\n  return (\n    <label>\n      <span>{name}</span>\n      <ControledSelect\n        name={name}\n        value={field.value}\n        onChange={helpers.setValue}\n        onBlur={() => helpers.setTouched(true)}\n        {...rest}\n      />\n    </label>\n  );\n}\n\nexport default Select;\n","import { useMemo } from 'react';\nimport { Formik, Form } from 'formik';\n\nimport FilterHelper from './Formik/FilterHelper';\nimport Select from './Formik/Select';\nimport list1 from './data/a';\nimport list2 from './data/b';\nimport list3 from './data/c';\nimport list4 from './data/d';\nimport './styles.css';\n\nfunction App() {\n  const getOption = ({ id }) => {\n    return {\n      label: String(id),\n      value: id,\n    };\n  };\n\n  const config = useMemo(\n    () => [\n      {\n        name: 'A',\n        list: list1,\n        getOption,\n        multi: false,\n      },\n      {\n        name: 'B',\n        list: list2,\n        getOption,\n        filterBy: 'aId',\n      },\n      {\n        name: 'C',\n        list: list3,\n        getOption,\n        filterBy: 'bId',\n      },\n      {\n        name: 'D',\n        list: list4,\n        getOption,\n        filterBy: 'cId',\n      },\n    ],\n    []\n  );\n\n  return (\n    <div className=\"App\">\n      <Formik\n        initialValues={{\n          A: null,\n          B: [],\n          C: [],\n          D: [],\n        }}\n      >\n        <Form>\n          <FilterHelper config={config}>\n            {propsList =>\n              propsList.map(props => (\n                <div key={props.name} className=\"row\">\n                  <Select multi clearable searchable={false} {...props} />\n                </div>\n              ))\n            }\n          </FilterHelper>\n        </Form>\n      </Formik>\n    </div>\n  );\n}\n\nexport default App;\n","import { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nconst rootElement = document.getElementById('root');\n\nReactDOM.render(\n  <StrictMode>\n    <App />,\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}